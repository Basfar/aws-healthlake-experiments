@startuml AWS HealthLake Orchestration

actor DataProducer as "Data Producer"

participant "C-CDA\nXML Files" as CDA #lightblue
participant "HL7 v2.x\nEDI Files" as HL7 #lightblue
participant "FHIR JSON\n(Bundles)" as FHIR_JSON #lightblue

participant "HealthLake Orch\nAWS S3 Store" as HLO_S3
participant "HealthLake Orch\n(this repo)" as HLO #lightyellow

participant "C-CDA to FHIR\nLambda API" as CCDA_FHIR_LAMBDA
participant "HL7 to FHIR\nLambda API" as HL7_FHIR_LAMBDA

participant "AWS HealthLake\nFHIR-Native" as HL #lightyellow
participant "HealthLake Orch\nSupport Hub" as HLO_SUPPORT #lightyellow
participant "Downstream Consumers\nOther Data Lakes" as DOWNSTREAM

DataProducer -> CDA: Produce C-CDA/XML Files
DataProducer -> HL7: Produce HL7 v2.x Files
DataProducer -> FHIR_JSON: Produce FHIR JSON Data

CDA --> HLO_S3: Lambda/SFTP to S3
HL7 --> HLO_S3: Lambda/SFTP to S3
FHIR_JSON -> HLO_S3: Lambda/SFTP\nto S3

HLO -> HLO_S3: S3 trigger\nor Batch Job\n(ingestion)
activate HLO #FFBBBB
HLO --> CCDA_FHIR_LAMBDA: C-CDA to FHIR Lambda
note right of CCDA_FHIR_LAMBDA
  how??
end note

CCDA_FHIR_LAMBDA --> HL: Transformed C-CDA
HLO --> HL7_FHIR_LAMBDA: HL7 v2 to FHIR Lambda
note right of HL7_FHIR_LAMBDA
  github.com
  LinuxForHealth
  hl7v2-fhir-converter
  Lambda
end note

HL7_FHIR_LAMBDA --> HL: Transformed HL7 v2
HLO -> HL: Native FHIR Bundles and Resources
deactivate HLO

note right of HL
  FHIR Queries 
  with HealthLake
  for data validation

  SQL Queries 
  with Athena
  for data validation
end note

HLO_SUPPORT -> HL: Query
HLO_SUPPORT -> HLO_S3: Query

note right of HLO_SUPPORT
  "Support Hub"
  Provenance
  Tracking
  "Needs Attention"
  etc.
end note

HLO -> DOWNSTREAM: Read FHIR from HL and Send Bundles Downstream
DOWNSTREAM -> HL: Access Directly?

@enduml
